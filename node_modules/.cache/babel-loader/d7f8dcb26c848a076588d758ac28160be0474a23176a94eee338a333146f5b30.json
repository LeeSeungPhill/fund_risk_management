{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_subheader = _resolveComponent(\"v-subheader\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_ag_grid_vue = _resolveComponent(\"ag-grid-vue\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_container, {\n    fluid: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_row, null, {\n      default: _withCtx(() => [_createVNode(_component_v_col, {\n        align: \"center\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_subheader, null, {\n          default: _withCtx(() => [_createTextVNode(\" [잔고 종목] \")]),\n          _: 1\n        })]),\n        _: 1\n      })]),\n      _: 1\n    }), _createVNode(_component_ag_grid_vue, {\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"300px\"\n      },\n      class: \"ag-theme-balham\",\n      columnDefs: _ctx.colDefs,\n      rowData: _ctx.rowData,\n      paginationAutoPageSize: true,\n      pagination: true,\n      defaultColDef: _ctx.defaultColDef,\n      onCellClicked: _ctx.onCellClicked\n    }, null, 8, [\"columnDefs\", \"rowData\", \"defaultColDef\", \"onCellClicked\"])]),\n    _: 1\n  })]);\n}","map":{"version":3,"mappings":";;;;;;;uBACEA,oBAoBM,cAnBJC,aAkBcC;IAlBDC,KAAK,EAAL;EAAK;sBACd,MAMQ,CANRF,aAMQG;wBALN,MAIQ,CAJRH,aAIQI;QAJDC,KAAK,EAAC;MAAQ;0BACnB,MAEc,CAFdL,aAEcM;4BAFD,MAEb,kBAFa,WAEb;;;;;;QAGJN,aASEO;MARAC,KAAmC,EAAnC;QAAA;QAAA;MAAA,CAAmC;MACnCC,KAAK,EAAC,iBAAiB;MACtBC,UAAU,EAAEC,YAAO;MACnBC,OAAO,EAAED,YAAO;MAChBE,sBAAsB,EAAE,IAAI;MAC5BC,UAAU,EAAE,IAAI;MAChBC,aAAa,EAAEJ,kBAAa;MAC5BK,aAAW,EAAEL","names":["_createElementBlock","_createVNode","_component_v_container","fluid","_component_v_row","_component_v_col","align","_component_v_subheader","_component_ag_grid_vue","style","class","columnDefs","_ctx","rowData","paginationAutoPageSize","pagination","defaultColDef","onCellClicked"],"sourceRoot":"","sources":["/home/terra/Github/fund_risk_management/src/components/StockBalance.vue"],"sourcesContent":["<template>\n  <div>\n    <v-container fluid>\n        <v-row>\n          <v-col align=\"center\">\n            <v-subheader>\n              [잔고 종목]\n            </v-subheader>\n          </v-col>\n        </v-row>\n        <ag-grid-vue \n          style=\"width: 100%; height: 300px;\" \n          class=\"ag-theme-balham\" \n          :columnDefs=\"colDefs\" \n          :rowData=\"rowData\" \n          :paginationAutoPageSize=\"true\"\n          :pagination=\"true\"\n          :defaultColDef=\"defaultColDef\"\n          @cellClicked=\"onCellClicked\"\n        />\n    </v-container>      \n  </div>\n</template>\n\n<script>\nimport { ref, defineComponent } from 'vue';\nimport axios from \"axios\";\nimport {AgGridVue} from 'ag-grid-vue3';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\n\nlet url = \"http://phills2.gonetis.com:8000/stockBalance/balanceList/\"; //장고 서버 주소\n\nexport default defineComponent({\n  name: 'App',\n  components:{\n    AgGridVue\n  },\n  setup(){\n\n    const defaultColDef = ref({\n      flex: 1,\n      minWidth: 100,\n      //editable: true,\n    });\n\n    const colDefs = ref([\n      {headerName: 'No', colId: 0, valueGetter: (params) => { return params.node.rowIndex + 1 } },\n      {headerName: '종목코드', field: 'code'},\n      {headerName: '종목명', field: 'name'},\n      {headerName: '매입가', field: 'purchase_price', valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '현재가', field: 'current_price', valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '거래량비율', field: 'prdy_vol_rate', valueFormatter: (params) => {return  params.value.toLocaleString() + '%';},},\n      {headerName: '수익률', field: 'earnings_rate', valueFormatter: (params) => {return  params.value.toLocaleString() + '%';},},\n      {headerName: '보유수량', field: 'purchase_amount', valueFormatter: (params) => {return params.value.toLocaleString() + '주';},},\n      {headerName: '매입총액', field: 'purchase_sum', valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '평가금액', field: 'eval_sum', valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '증감액', field: 'valuation_sum', valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '저항가격', field: 'sign_resist_price', valueSetter: params => {\n                \n        params.data.sign_resist_price = params.newValue;\n\n        axios({\n                method: \"GET\",\n                url: \"http://phills2.gonetis.com:8000/stockBalance/update/\",\n                params:{\n                  id: params.data.id,\n                  sign_resist_price: params.newValue,\n                  sign_support_price: params.data.sign_support_price,\n                  end_target_price: params.data.end_target_price,\n                  end_loss_price: params.data.end_loss_price,\n                  trading_plan: params.data.trading_plan\n                }\n                \n                }).then(response => {\n                  console.log(\"Success\", response)\n                }).catch(error => {\n                  alert(\"처리 에러\")\n                  console.log(\"Failed to updateItem1\", error.response);\n                });\n                return true;\n      }, editable: true, cellEditor: 'agTextCellEditor', cellEditorParams: { min: 0, max: 9999999 }, valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '지지가격', field: 'sign_support_price', valueSetter: params => {\n                \n        params.data.sign_support_price = params.newValue;\n\n        axios({\n                method: \"GET\",\n                url: \"http://phills2.gonetis.com:8000/stockBalance/update/\",\n                params:{\n                  id: params.data.id,\n                  sign_resist_price: params.data.sign_resist_price,\n                  sign_support_price: params.newValue,\n                  end_target_price: params.data.end_target_price,\n                  end_loss_price: params.data.end_loss_price,\n                  trading_plan: params.data.trading_plan\n                }\n                \n                }).then(response => {\n                  console.log(\"Success\", response)\n                }).catch(error => {\n                  alert(\"처리 에러\")\n                  console.log(\"Failed to updateItem1\", error.response);\n                });\n                return true;\n      }, editable: true, cellEditor: 'agTextCellEditor', cellEditorParams: { min: 0, max: 9999999 }, valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '목표가격', field: 'end_target_price', valueSetter: params => {\n                \n        params.data.end_target_price = params.newValue;\n\n        axios({\n                method: \"GET\",\n                url: \"http://phills2.gonetis.com:8000/stockBalance/update/\",\n                params:{\n                  id: params.data.id,\n                  sign_resist_price: params.data.sign_resist_price,\n                  sign_support_price: params.data.sign_support_price,\n                  end_target_price: params.newValue,\n                  end_loss_price: params.data.end_loss_price,\n                  trading_plan: params.data.trading_plan\n                }\n                \n                }).then(response => {\n                  console.log(\"Success\", response)\n                }).catch(error => {\n                  alert(\"처리 에러\")\n                  console.log(\"Failed to updateItem1\", error.response);\n                });\n                return true;\n      }, editable: true, cellEditor: 'agTextCellEditor', cellEditorParams: { min: 0, max: 9999999 }, valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '이탈가격', field: 'end_loss_price', valueSetter: params => {\n                \n        params.data.end_loss_price = params.newValue;\n\n        axios({\n                method: \"GET\",\n                url: \"http://phills2.gonetis.com:8000/stockBalance/update/\",\n                params:{\n                  id: params.data.id,\n                  sign_resist_price: params.data.sign_resist_price,\n                  sign_support_price: params.data.sign_support_price,\n                  end_target_price: params.data.end_target_price,\n                  end_loss_price: params.newValue,\n                  trading_plan: params.data.trading_plan\n                }\n                \n                }).then(response => {\n                    console.log(\"Success\", response)\n                }).catch(error => {\n                    alert(\"처리 에러\")\n                    console.log(\"Failed to updateItem1\", error.response);\n                });\n                return true;\n      }, editable: true, cellEditor: 'agTextCellEditor', cellEditorParams: { min: 0, max: 9999999 }, valueFormatter: (params) => {return '￦' + params.value.toLocaleString();},},\n      {headerName: '매매계획', field: 'trading_plan', valueFormatter: (params) => {return params.value === 'B' ? '매수' : params.value === 'S' ? '매도' : params.value === 'H' ? '보유' : ''}, valueSetter: params => {\n                \n        params.data.trading_plan = params.newValue;\n\n        axios({\n                method: \"GET\",\n                url: \"http://phills2.gonetis.com:8000/stockBalance/update/\",\n                params:{\n                  id: params.data.id,\n                  sign_resist_price: params.data.sign_resist_price,\n                  sign_support_price: params.data.sign_support_price,\n                  end_target_price: params.data.end_target_price,\n                  end_loss_price: params.data.end_loss_price,\n                  trading_plan: params.newValue\n                }\n                \n                }).then(response => {\n                  console.log(\"Success\", response)\n                }).catch(error => {\n                  alert(\"처리 에러\")\n                  console.log(\"Failed to updateItem1\", error.response);\n                });\n                return true;\n      }, editable: true, cellEditor: 'agSelectCellEditor', cellEditorParams: {values:['H','S','B']},},\n      {headerName: '시가총액', field: 'total_market_value', valueFormatter: (params) => {return params.value.toLocaleString() + '억원';},},\n    ]);\n\n    return {\n      defaultColDef,\n      colDefs\n    }\n  },\n  data() {\n    return {\n        rowData: [],\n        charturl: null,\n        data: {\n          sign_resist_price: \"\",\n          sign_support_price: \"\",\n          end_loss_price: \"\",\n          end_target_price: \"\",\n          trading_plan: \"\",\n        },\n    };\n  },\n  methods: {\n    onCellClicked: (e) =>{\n      let charturl = null;\n                \n      if(e.column.colId === 'code'){\n        axios({\n          method: \"GET\",\n          url: \"http://phills2.gonetis.com:8000/stockOrder/chart/\",\n          params:{\n            code: e.data.code.trim(),\n            company: e.data.name.trim(),\n          }\n                                                \n        }).then(response => {\n          console.log(\"Success\", response)\n          charturl = \"http://phills2.gonetis.com:8000/stockOrder/\"+response.data[0].name+\"/\"\n          window.open(charturl, \"\", \"_blank\"); \n          charturl = null\n        }).catch(error => {\n          alert(\"처리 에러\")\n          console.log(\"Failed to doInfo\", error.response);\n        }); \n        if(charturl != null) \n          window.open(charturl, \"\", \"_blank\"); \n      }    \n\n      if(e.column.colId === 'name'){  \n        axios({\n          method: \"GET\",\n          url: \"http://phills2.gonetis.com:8000/stockOrder/minutesInfo/\",\n          params:{\n            code: e.data.code.trim(),\n            company: e.data.name.trim(),\n            app_key: e.data.app_key,\n            app_secret: e.data.app_secret,\n            access_token: e.data.access_token\n          }\n                                    \n        }).then(response => {\n          console.log(\"Success\", response)\n          charturl = \"http://phills2.gonetis.com:8000/stockOrder/minutes_\"+response.data[0].name+\"/\"\n          window.open(charturl, \"\", \"_blank\"); \n          charturl = null\n        }).catch(error => {\n          alert(\"처리 에러\")\n          console.log(\"Failed to minutesInfo\", error.response);\n        }); \n        if(charturl != null) \n          window.open(charturl, \"\", \"_blank\"); \n      }\n    },     \n    fetchData(){\n      axios({\n      method: \"GET\",\n      url: url,\n      params:{\n        acct_no: this.$route.params.acct_no,\n        app_key: this.$route.params.app_key,\n        app_secret: this.$route.params.app_secret,\n        access_token: this.$route.params.access_token\n      }\n    })\n    .then(response => {\n      console.log('Success', response.data)\n      this.rowData = response.data;\n      this.rowData.forEach(data => {data.acct_no = this.$route.params.acct_no})\n      this.rowData.forEach(data => {data.app_key = this.$route.params.app_key})\n      this.rowData.forEach(data => {data.app_secret = this.$route.params.app_secret})\n      this.rowData.forEach(data => {data.access_token = this.$route.params.access_token})\n    })\n    .catch(error => {\n      console.log(error)\n    })\n    },\n    marketReg(){\n      axios({\n      method: \"GET\",\n      url: \"http://phills2.gonetis.com:8000/stockFundMng/marketReg/\",\n      params:{\n        acct_no: this.$route.params.acct_no,\n        app_key: this.$route.params.app_key,\n        app_secret: this.$route.params.app_secret,\n        access_token: this.$route.params.access_token\n      }\n    })\n    .then(response => {\n      console.log('trail_signal:', response.data)\n    })\n    .catch(error => {\n      console.log(error)\n    })\n    },\n    riskReg(){\n      axios({\n      method: \"GET\",\n      url: \"http://phills2.gonetis.com:8000/stockMarketMng/list/\",\n      params:{\n        acct_no: this.$route.params.acct_no,\n        app_key: this.$route.params.app_key,\n        app_secret: this.$route.params.app_secret,\n        access_token: this.$route.params.access_token\n      }\n    })\n    .then(response => {\n      console.log('market_mng :', response.data)\n    })\n    .catch(error => {\n      console.log(error)\n    })\n    }\n  },\n  created() { \n    this.fetchData();\n    this.marketReg();\n    this.riskReg();\n  }\n\n  \n});\n</script>\n<style scoped>\n.up {\n    font-weight: bold;\n    color: red;\n}\n.down {\n  font-weight: bold;\n  color: blue;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}